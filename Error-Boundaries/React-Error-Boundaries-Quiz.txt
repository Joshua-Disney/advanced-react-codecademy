Quiz Summary
React Error Boundaries
75% Great job!



1: Which of the following statements is NOT TRUE about the react-error-boundary package?

Answer: Developers are NOT encouraged to use third party packages like react-error-boundary.
Instead, they should always create their own error boundaries.



2: Fill in the blanks below to complete the code such that the <ErrorBoundary> component from react-error-boundary uses the logError function to log errors that are thrown.

const App = () => {
  return (
    <ErrorBoundary  = {  } >
      <MyErrorProneComponent />
    </ErrorBoundary>
  )
} 

Answer: onError   logError



3: The componentDidCatch() lifecycle method accepts two arguments: error and errorInfo

Which of the following properties from these arguments contains a list of components that were rendered before the error was thrown? For example:

Error: Why do we even have this switch?
in LightSwitch (created by App)
in ErrorBoundary (created by App)
in div (created by App)
in App

Answer: errorInfo.componentStack



4: Which of the following is a TRUE statement about React error boundaries?

Answer: React error boundaries must be implemented as class components.  React error boundaries must implement the lifecycle methods 
static getDerivedStateFromError() and componentDidCatch(), both of which are accessible only from class components.



5: Fill in the blanks below to complete the code such that the <ErrorBoundary> component updates this.state and renders a fallback when an error occurs.

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { error: null }
  }
 
   {
    
  }
 
 
  render() {
    if (this.state.error) {
      return <p>Uh oh! Something went wrong.</p>;
    }
    else {
      return this.props.children;
    }
  }
}

Answer: I legitimately don't know.  I got it wrong and it's not showing me the correct answer.



6: Fill in the blanks below to complete the code such that the <ErrorBoundary> component from react-error-boundary renders a fallback UI. The fallback UI should have a button to reset the error boundary.

import { ErrorBoundary } from 'react-error-boundary';
 
const FallbackUI = () => {
  return (
    <>
      <p> Uh oh! Something went wrong. </p>
      <button >Reset</button>
    </>
  )
}
 
const App = () => {
  return (
    <>
      <MyErrorProneComponent />
    </ErrorBoundary>
  )
} 
 
Answer: { resetErrorBoundary }, onClick={resetErrorBoundary}, ErrorBoundary FallbackComponent={FallbackUI}



7: Which of the following is NOT a true statement about error boundaries?

Answer: Error boundaries use try/catch syntax to catch errors thrown by their child component trees.



8: Where should error boundaries be used in a React application?

Answer: As close as possible to components that are potential sources of runtime errors.